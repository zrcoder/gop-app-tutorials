import (
	"gop-app-tutorials/log"

	"github.com/zrcoder/app"
)

type ItemView struct {
	app.Compo

	Item  *Item
	Index int

	isEditing bool
}

func (p *ItemView) Render() app.UI {
	completed, editing := "", ""
	if p.Item.Completed {
		completed = "completed"
	}
	if p.isEditing {
		editing = "editing"
	}
	return app.li.class(completed).class(editing).body(
		app.div.class("view").body(
			app.input.Type("checkbox").class("toggle").checked(p.Item.Completed).onChange(p.onCheckBoxClick),
			app.label.text(p.Item.Title).onDblClick(p.onStartEdit),
			app.button.class("destroy").onClick(p.onDelete),
		),
		app.input.class("edit").value(p.Item.Title).onChange(p.onStopEdit).onBlur(p.onStopEdit),
	)
}

func (p *ItemView) onCheckBoxClick(ctx app.Context, e app.Event) {
	p.Item.Completed = !p.Item.Completed
}

func (p *ItemView) onStartEdit(ctx app.Context, e app.Event) {
	p.isEditing = true
}

func (p *ItemView) onStopEdit(ctx app.Context, e app.Event) {
	p.isEditing = false
	p.Item.Title = ctx.jsSrc.get("value").string
}

func (p *ItemView) onDelete(ctx app.Context, e app.Event) {
	log.println "delete item:", p.Index, p.Item.Title
	Items = append(Items[:p.Index], Items[p.Index+1:]...)
}
