import (
	"bytes"
	"fmt"
	"strings"

	"github.com/gomarkdown/markdown"
	"github.com/gomarkdown/markdown/html"
	"github.com/gomarkdown/markdown/parser"
	"github.com/zrcoder/app"
	"github.com/zrcoder/app/ui"
)

type Index struct {
	Title string
	Href  string
	Level int
}

type DocIndex struct {
	app.Compo

	Indexes []Index
}

func newDocIndex() *DocIndex {
	return &DocIndex{}
}

func (p *DocIndex) Data(data []byte) *DocIndex {
	extensions := parser.CommonExtensions | parser.AutoHeadingIDs
	parser := parser.NewWithExtensions(extensions)
	htmlFlags := html.TOC
	opts := html.RendererOptions{Flags: htmlFlags}
	renderer := html.NewRenderer(opts)
	data = markdown.ToHTML(data, parser, renderer)

	htmlStr := string(data)
	htmlStr = strings.trimSpace(htmlStr)
	const tocStart = `<nav>`
	const tocTail = `</nav>`
	if !strings.hasPrefix(htmlStr, tocStart) || !strings.contains(htmlStr, tocTail) {
		return p
	}
	htmlStr = htmlStr[len(tocStart):strings.index(htmlStr, tocTail)]

	between := func(s, first, second string) string {
		i, j := strings.index(s, first), strings.index(s, second)
		if i == -1 || j == -1 || i >= j {
			return ""
		}
		return s[i+len(first) : j]
	}

	lines := strings.split(htmlStr, "\n")
	level := 0
	for _, line := range lines {
		line = strings.trimSpace(line)
		if line == `<ul>` {
			level++
			continue
		}
		if line == `</ul>` {
			level--
			continue
		}
		herf := between(line, `<a href="`, `">`)
		title := between(line, `">`, `</a>`)
		if herf == "" || title == "" {
			continue
		}
		p.Indexes = append(p.Indexes, Index{Level: level, Title: title, Href: herf})
	}

	return p
}

func (p *DocIndex) Render() app.UI {
	return app.div.class("fill").body(
		app.If(p.Indexes != nil,
			app.Range(p.Indexes).slice(func(i int) app.UI {
				index := p.Indexes[i]
				focus := ""
				if app.window.URL().Fragment == index.Href[1:] {
					focus = "focus"
				}
				return ui.link.class(focus).class("link index-link").label(p.makeTitle(index)).href(index.Href)
			}),
		),
	)
}

func (p *DocIndex) makeTitle(index Index) string {
	n := index.Level - 1
	buf := strings.Builder{}
	for n > 0 {
		buf.writeString("  ")
		n--
	}
	buf.writeString(index.Title)
	return buf.String()
}
